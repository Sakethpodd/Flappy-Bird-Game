'''
This is a simple Flappy Bird game created using the pygame library. The game features a bird that the player controls by pressing the space bar to make it jump
avoiding randomly generated pipes while scoring points. It includes a start screen where the player presses space to begin, a main game loop where the bird moves 
and collides with obstacles, and a game over screen showing the score and high score. The game tracks and displays the highest score achieved during the session. 
The player can restart or quit after a game over.
'''
import pygame
import random
import sys

pygame.init()

Width, Height = 400, 600
win = pygame.display.set_mode((Width, Height)) # Screen dimensions
pygame.display.set_caption('Flappy Bird')

White = (255, 255, 255)
Green = (0, 255, 0) # Colors
Black = (0, 0, 0)

Fps = 30
Gravity = 1
Jump = -15 # Game settings
Pipe_Width = 70
Pipe_Gap = 150

bird_image = pygame.Surface((30, 30)) # Bird image
bird_image.fill((255, 255, 0))


class Bird:
    def __init__(self):
        self.x = 100
        self.y = Height // 2
        self.vel = 0
        self.rect = pygame.Rect(self.x, self.y, 30, 30)

    def update(self):
        self.vel += Gravity
        self.y += self.vel
        self.rect.topleft = (self.x, self.y)

    def jump(self):
        self.vel = Jump

    def draw(self, win):
        win.blit(bird_image, (self.x, self.y))


class Pipe:
    def __init__(self):
        self.x = Width
        self.height = random.randint(50, Height - Pipe_Gap - 50)
        self.top = pygame.Rect(self.x, 0, Pipe_Width, self.height)
        self.bottom = pygame.Rect(
            self.x, self.height + Pipe_Gap, Pipe_Width, Height - self.height - Pipe_Gap)

    def update(self):
        self.x -= 5
        self.top.topleft = (self.x, 0)
        self.bottom.topleft = (self.x, self.height + Pipe_Gap)

    def draw(self, win):
        pygame.draw.rect(win, Green, self.top)
        pygame.draw.rect(win, Green, self.bottom)


def start_screen(high_score):
    font_big = pygame.font.SysFont(None, 72)
    font_small = pygame.font.SysFont(None, 36)

    title_text = font_big.render('Flappy Bird', True, Black)
    start_text = font_small.render('Press SPACE to Start', True, Black)
    high_score_text = font_small.render(f'High Score: {high_score}', True, Black)

    while True:
        win.fill(White)
        win.blit(title_text, (Width // 2 - title_text.get_width() // 2, Height // 3))
        win.blit(start_text, (Width // 2 - start_text.get_width() // 2, Height // 2))
        win.blit(high_score_text, (Width // 2 - high_score_text.get_width() // 2, Height // 2 + 50))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                return


def game_over(win, score, high_score):
    font_big = pygame.font.SysFont(None, 72)
    font_small = pygame.font.SysFont(None, 36)

    game_over_text = font_big.render('Game Over', True, Black)
    score_text = font_big.render(f'Score: {score}', True, Black)
    high_score_text = font_small.render(f'High Score: {high_score}', True, Black)
    restart_text = font_small.render('Press R to Play Again or Q to Quit', True, Black)

    win.fill(White)
    win.blit(game_over_text, (Width // 2 - game_over_text.get_width() // 2, Height // 3))
    win.blit(score_text, (Width // 2 - score_text.get_width() // 2, Height // 2))
    win.blit(high_score_text, (Width // 2 - high_score_text.get_width() // 2, Height // 2 + 50))
    win.blit(restart_text, (Width // 2 - restart_text.get_width() // 2, Height // 2 + 100))
    pygame.display.update()
    return wait_for_restart()


def wait_for_restart():
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:  # Restart game
                    return True
                if event.key == pygame.K_q:  # Quit game
                    pygame.quit()
                    sys.exit()


def main():
    high_score = 0  # Initialize the high score
    while True:  # Main game loop to allow restarting
        start_screen(high_score)  # Display start screen before starting the game
        clock = pygame.time.Clock()
        bird = Bird()
        pipes = [Pipe()]
        score = 0
        font = pygame.font.SysFont(None, 36)
        run = True

        while run:
            clock.tick(Fps)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                    bird.jump()

            bird.update()

            if pipes[-1].x < Width // 2:
                pipes.append(Pipe())

            for pipe in pipes[:]:
                pipe.update()
                if pipe.x + Pipe_Width < 0:
                    pipes.remove(pipe)
                    score += 1

            if bird.y > Height or bird.y < 0:
                run = False

            for pipe in pipes:
                if bird.rect.colliderect(pipe.top) or bird.rect.colliderect(pipe.bottom):
                    run = False

            win.fill(White)
            bird.draw(win)
            for pipe in pipes:
                pipe.draw(win)

            score_text = font.render(f'Score: {score}', True, Black)
            win.blit(score_text, (10, 10))

            pygame.display.update()

        if score > high_score:         # Update high score if needed
            high_score = score

        if not game_over(win, score, high_score):         # After game over, ask if the player wants to play again
            break


if __name__ == '__main__':
    main()
